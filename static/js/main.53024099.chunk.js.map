{"version":3,"sources":["components/Header.js","components/Email.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","Email","name","email","onClick","deleteComponent","bind","this","id","App","state","users","onChangeName","e","setState","target","value","console","log","onChangeEmail","saveEmail","preventDefault","uniqid","delete","newUser","filter","user","onSubmit","type","placeholder","onChange","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wRAUeA,MARf,SAAgBC,GACZ,OACI,yBAAKC,UAAU,yCACX,4CCSGC,MAZf,SAAeF,GACX,OACI,yBAAKC,UAAU,kBACX,yBAAKA,UAAU,YACX,2BAAG,qCAAH,IAAkBD,EAAMG,MACxB,2BAAG,sCAAH,IAAmBH,EAAMI,OACzB,4BAAQH,UAAU,2BAA2BI,QAASL,EAAMM,gBAAgBC,KAAKC,KAAMR,EAAMS,KAA7F,a,gBCyEDC,E,2MA1EbC,MAAQ,CACNC,MAAQ,CACN,CACEH,GAAI,EACJN,KAAM,SACNC,MAAO,uBAET,CACEK,GAAI,EACJN,KAAM,SACNC,MAAO,uBAET,CACEK,GAAI,EACJN,KAAM,QACNC,MAAO,sBAET,CACEK,GAAI,EACJN,KAAM,SACNC,MAAO,wBAGXD,KAAM,GACNC,MAAO,I,EAGTS,aAAe,SAACC,GACd,EAAKC,SACH,CAACZ,KAAMW,EAAEE,OAAOC,QAElBC,QAAQC,IAAI,EAAKR,MAAMR,O,EAGzBiB,cAAgB,SAACN,GACf,EAAKC,SACH,CAACX,MAAOU,EAAEE,OAAOC,QAEnBC,QAAQC,IAAI,EAAKR,MAAMP,Q,EAGzBiB,UAAY,SAACP,GACXA,EAAEQ,iBACF,IAAIlB,EAAQ,CACVK,GAAIc,MACJpB,KAAM,EAAKQ,MAAMR,KACjBC,MAAO,EAAKO,MAAMP,OAGnB,EAAKW,SAAS,CAAEH,MAAM,GAAD,mBAAM,EAAKD,MAAMC,OAAjB,CAAwBR,O,EAEhDoB,OAAS,SAACf,GACRS,QAAQC,IAAIV,GACZ,IAAIgB,EAAU,EAAKd,MAAMC,MAAMc,QAAQ,SAAAC,GAAI,OAAMA,EAAKlB,KAAOA,KAC7D,EAAKM,SAAS,CAACH,MAAOa,K,wEAGf,IAAD,OACN,OACE,oCACE,kBAAC,EAAD,MACA,0BAAMxB,UAAU,iBAAiB2B,SAAUpB,KAAKa,WAC9C,2BAAOQ,KAAK,OAAO5B,UAAU,oBAAoB6B,YAAY,aAAaC,SAAUvB,KAAKK,eACzF,2BAAOgB,KAAK,QAAQ5B,UAAU,oBAAoB6B,YAAY,cAAcC,SAAUvB,KAAKY,gBAC3F,2BAAOS,KAAK,SAAS5B,UAAU,kBAAkBgB,MAAM,YAGrDT,KAAKG,MAAMC,MAAMoB,KAAK,SAAAL,GAAI,OAAI,kBAAC,EAAD,CAAOM,IAAKN,EAAKlB,GAAIA,GAAIkB,EAAKlB,GAAIN,KAAMwB,EAAKxB,KAAMC,MAAOuB,EAAKvB,MAAOE,gBAAiB,EAAKkB,iB,GApEpHU,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.53024099.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Header(props){\r\n    return(\r\n        <nav className=\"bg-primary text-center text-white p-3\">\r\n            <h2>Email List</h2>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\n\r\nfunction Email(props){\r\n    return(\r\n        <div className=\"container mb-3\">\r\n            <div className=\"card p-3\">\r\n                <p><b>Name: </b> {props.name}</p>\r\n                <p><b>Email: </b> {props.email}</p>\r\n                <button className=\"btn btn-sm btn-secondary\" onClick={props.deleteComponent.bind(this, props.id)}>Delete</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Email","import React, { Component } from 'react'\nimport './App.css';\nimport Header from './components/Header'\nimport Email from './components/Email'\nimport uniqid from 'uniqid'\n\nclass App extends Component {\n  state = {\n    users : [\n      {\n        id: 1,\n        name: 'nagesh',\n        email: 'nagesh@testmail.com'\n      },\n      {\n        id: 2,\n        name: 'mahesh',\n        email: 'mahesh@testmail.com'\n      },\n      {\n        id: 3,\n        name: 'bhanu',\n        email: 'bhanu@testmail.com'\n      },\n      {\n        id: 4,\n        name: 'aditya',\n        email: 'aditya@testmail.com'\n      }\n    ],\n    name: \"\",\n    email: \"\"\n  }\n\n  onChangeName = (e) => {\n    this.setState(\n      {name: e.target.value}\n    )\n    console.log(this.state.name)\n  }\n\n  onChangeEmail = (e) => {\n    this.setState(\n      {email: e.target.value}\n    )\n    console.log(this.state.email)\n  }\n\n  saveEmail = (e) => {\n    e.preventDefault()\n    let email = {\n      id: uniqid(),\n      name: this.state.name,\n      email: this.state.email\n     }\n     \n     this.setState({ users: [...this.state.users, email]})\n  }\n  delete = (id) =>{\n    console.log(id)\n    let newUser = this.state.users.filter( user => ( user.id !== id))\n    this.setState({users: newUser})\n  }\n\n  render(){\n    return (\n      <> \n        <Header />\n        <form className=\"container my-3\" onSubmit={this.saveEmail}>\n          <input type=\"text\" className=\"form-control mb-3\" placeholder=\"Enter Name\" onChange={this.onChangeName} />\n          <input type=\"email\" className=\"form-control mb-3\" placeholder=\"Enter Email\" onChange={this.onChangeEmail} />\n          <input type=\"submit\" className=\"btn btn-primary\" value=\"Create\" />\n        </form>\n        \n          { this.state.users.map( user => <Email key={user.id} id={user.id} name={user.name} email={user.email} deleteComponent={this.delete} /> )}          \n        \n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}